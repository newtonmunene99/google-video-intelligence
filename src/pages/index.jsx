import Head from "next/head";
import { useRef, useState, MutableRefObject } from "react";

export default function Home() {
  /**
   * @type {MutableRefObject<HTMLVideoElement>}
   */
  const playerRef = useRef(null);

  const [video, setVideo] = useState();

  const [loading, setLoading] = useState(false);

  const handleUploadVideo = async () => {
    try {
      // Set loading to true
      setLoading(true);

      // Make a POST request to the `api/videos/` endpoint
      const response = await fetch("/api/videos", {
        method: "post",
      });

      const data = await response.json();

      // Check if the response is successful
      if (response.status >= 200 && response.status < 300) {
        /**
         * @type {UploadVideoResult}
         */
        const result = data.result;

        console.log(data);

        // Update our videos state with the results
        setVideo(result);
      } else {
        throw data;
      }
    } catch (error) {
      // TODO: Handle error
      console.error(error);
    } finally {
      setLoading(false);
      // Set loading to true once a response is available
    }
  };

  return [
    <div key="main div">
      <Head>
        <title>Navigating auto tagged video</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header>
        <h1>Navigating auto tagged videos</h1>
      </header>
      <main className="container">
        <div className="wrapper">
          <div className="actions">
            <button onClick={handleUploadVideo} disabled={loading}>
              Upload
            </button>
          </div>
          <hr />
          {loading
            ? [
                <div className="loading" key="loading div">
                  Please be patient as the video uploads...
                </div>,
                <hr key="loading div break" />,
              ]
            : null}

          {video ? (
            <div className="videos-wrapper">
              <div className="video-wrapper">
                <video
                  ref={playerRef}
                  controls
                  src={video.uploadResult.secure_url}
                ></video>
                <div className="navigation">
                  <h2>Rooms</h2>
                  {video.annotations.frameLabelAnnotations
                    .filter((annotation) =>
                      annotation.categoryEntities?.some((entity) =>
                        entity?.description?.includes("room")
                      )
                    )
                    .map((annotation, index) => {
                      return [
                        <details key={`entity-${index}`}>
                          <summary>{annotation.entity.description}</summary>
                          <ul>
                            {annotation.frames.map((frame, frameIndex) => {
                              const seconds = frame.timeOffset.seconds ?? 0;

                              return (
                                <li
                                  key={`frame-${frameIndex}`}
                                  onClick={() => {
                                    playerRef.current.currentTime = seconds;
                                  }}
                                >
                                  Seek to{" "}
                                  {new Date(seconds * 1000)
                                    .toISOString()
                                    .substr(11, 8)}
                                </li>
                              );
                            })}
                          </ul>
                        </details>,
                        <hr key={`entity-break-${index}`} />,
                      ];
                    })}
                </div>
              </div>
              <p>{video.uploadResult.secure_url}</p>
            </div>
          ) : (
            <div className="no-videos">
              No video yet. Get started by clicking on upload above
            </div>
          )}
        </div>
      </main>
    </div>,
    <style key="style tag" jsx="true">{`
      * {
        box-sizing: border-box;
      }

      header {
        height: 200px;
        background-color: deeppink;
        display: flex;
        justify-content: center;
        align-items: center;
      }

      header h1 {
        padding: 0;
        margin: 0;
        color: white;
      }

      .container {
        min-height: 100vh;
        background-color: white;
      }

      .container .wrapper {
        max-width: 1000px;
        margin: 0 auto;
      }

      .container .wrapper .actions {
        display: flex;
        justify-content: center;
        align-items: center;
      }

      .container .wrapper .actions button {
        margin: 10px;
        padding: 20px 40px;
        width: 80%;
        font-weight: bold;
        border: solid 2px black;
        border-radius: 2px;
      }

      .container .wrapper .actions button:hover {
        background-color: deeppink;
        color: white;
        border: solid 2px white;
      }

      .container .wrapper .videos-wrapper {
        display: flex;
        flex-flow: column;
        justify-content: center;
        align-items: center;
      }

      .container .wrapper .video-wrapper {
        display: flex;
        flex-flow: row nowrap;
        justify-content: start;
        align-items: start;
        width: 100%;
        height: 500px;
        border: solid 1px black;
        border-radius: 2px;
      }

      .container .wrapper .video-wrapper video {
        width: 75%;
        height: 100%;
        object-fit: fill;
      }

      .container .wrapper .video-wrapper .navigation {
        width: 25%;
        height: 100%;
        overflow-y: auto;
        padding: 8px;
      }

      .container .wrapper .video-wrapper .navigation summary,
      .container .wrapper .video-wrapper .navigation ul li {
        cursor: pointer;
      }

      .container .wrapper .video-wrapper .navigation summary:hover,
      .container .wrapper .video-wrapper .navigation ul li:hover {
        color: deeppink;
      }

      .container .wrapper .video-wrapper .navigation ul {
        list-style-type: disclosure-closed;
      }

      .container .wrapper .no-videos,
      .container .wrapper .loading {
        display: flex;
        justify-content: center;
        align-items: center;
      }
    `}</style>,
  ];
}
